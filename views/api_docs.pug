doctype html
html
  head
    title Documentación de la API
    style.
      body { font-family: sans-serif; line-height: 1.6; margin: 20px; }
      h1, h2, h3 { color: #333; }
      pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }
      code { font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; }
      .endpoint { margin-bottom: 20px; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
      .method { font-weight: bold; margin-right: 10px; }
      .get { color: green; }
      .post { color: blue; }
      .patch { color: orange; }
      .delete { color: red; }

  body
    h1 Documentación de la API

    .endpoint
      h2 Libros API

      h3
        span.method.get GET
        | /api/libros
      p Obtiene una lista de todos los libros.
      pre
        code.
          GET /api/libros

      h3
        span.method.get GET
        | /api/libros/:id
      p Obtiene un libro por su ObjectId.
      pre
        code.
          GET /api/libros/ID_DEL_LIBRO

      h3
        span.method.post POST
        | /api/libros
      p Crea un nuevo libro. El campo <code>proveedor</code> es obligatorio y debe ser el ObjectId de un proveedor de tipo "libreria".
      pre
        code.
          POST /api/libros
          Content-Type: application/json
          {
            "nombre": "Nombre del libro",
            "autor": "Autor",
            "precio": 123.45,
            "genero": "Novela",
            "stock": 10,
            "stockMinimo": 5,
            "proveedor": "ID_DEL_PROVEEDOR"
          }

      h3
        span.method.patch PATCH
        | /api/libros/:id
      p Edita un libro existente. El campo <code>proveedor</code> también puede ser actualizado (debe ser un proveedor de tipo "libreria").
      pre
        code.
          PATCH /api/libros/ID_DEL_LIBRO
          Content-Type: application/json
          {
            "nombre": "Nuevo nombre",
            "autor": "Nuevo autor",
            "precio": 99.99,
            "genero": "Cuento",
            "stock": 5,
            "stockMinimo": 3,
            "proveedor": "ID_DEL_PROVEEDOR"
          }

      h3
        span.method.delete DELETE
        | /api/libros/:id
      p Elimina un libro por su ObjectId.
      pre
        code.
          DELETE /api/libros/ID_DEL_LIBRO

    .endpoint
      h2 Proveedores API

      h3
        span.method.get GET
        | /api/proveedores
      p Obtiene una lista de todos los proveedores. Puedes filtrar por tipo usando <code>?tipo=libreria</code>, <code>?tipo=cafeteria</code>, etc.
      pre
        code.
          GET /api/proveedores?tipo=libreria

      h3
        span.method.get GET
        | /api/proveedores/:id
      p Obtiene un proveedor por su ObjectId.
      pre
        code.
          GET /api/proveedores/ID_DEL_PROVEEDOR

      h3
        span.method.post POST
        | /api/proveedores
      p Crea un nuevo proveedor.
      pre
        code.
          POST /api/proveedores
          Content-Type: application/json
          {
            "nombre": "Nombre del proveedor",
            "mail": "proveedor@email.com",
            "tipo_proveedor": "libreria",
            "contacto": "Contacto",
            "telefono": "011-1234-5678",
            "sitio_web": "https://proveedor.com"
          }

      h3
        span.method.patch PATCH
        | /api/proveedores/:id
      p Edita un proveedor existente.
      pre
        code.
          PATCH /api/proveedores/ID_DEL_PROVEEDOR
          Content-Type: application/json
          {
            "nombre": "Nuevo nombre",
            "mail": "nuevo@email.com",
            "tipo_proveedor": "libreria",
            "contacto": "Nuevo contacto",
            "telefono": "011-0000-0000",
            "sitio_web": "https://nuevo.com"
          }

      h3
        span.method.delete DELETE
        | /api/proveedores/:id
      p Elimina un proveedor por su ObjectId.
      pre
        code.
          DELETE /api/proveedores/ID_DEL_PROVEEDOR

    .endpoint
      h2 Ventas API

      h3
        span.method.get GET
        | /api/ventas
      p Obtiene el historial de ventas de libros. Cada venta incluye los datos históricos del libro (nombre, autor, género, precio) para mantener el reporte aunque el libro sea eliminado.
      pre
        code.
          GET /api/ventas
      p Respuesta de ejemplo:
      pre
        code.
          [
            {
              "_id": "ID_VENTA",
              "libro": "ID_DEL_LIBRO",
              "nombreLibro": "El Aleph",
              "autorLibro": "Jorge Luis Borges",
              "generoLibro": "Cuento",
              "precioLibro": 3200,
              "cantidad": 3,
              "fecha": "2025-06-18T12:34:56.789Z"
            },
            // ...
          ]
      p Puedes filtrar los reportes por día, semana, mes o todo desde el frontend. Las fechas se muestran en formato día/mes/año en la interfaz.

      h3
        span.method.get GET
        | /api/ventas/mas-vendidos
      p Devuelve un array plano con los libros más vendidos en el periodo seleccionado. Permite filtrar por día, semana, mes o todo usando el query param <code>periodo</code> (valores: <code>dia</code>, <code>semana</code>, <code>mes</code>, <code>todo</code>). Por defecto: <code>todo</code>.
      pre
        code.
          GET /api/ventas/mas-vendidos?periodo=semana
      p Respuesta de ejemplo:
      pre
        code.
          [
            {
              "nombreLibro": "El Aleph",
              "autorLibro": "Jorge Luis Borges",
              "generoLibro": "Cuento",
              "precioLibro": 3200,
              "cantidadVendida": 8
            },
            {
              "nombreLibro": "Rayuela",
              "autorLibro": "Julio Cortázar",
              "generoLibro": "Novela",
              "precioLibro": 4100,
              "cantidadVendida": 5
            }
          ]

      h3
        span.method.get GET
        | /api/ventas/ventas-semana
      p Devuelve la cantidad total de ventas y el ingreso total por cada día de la semana actual. Útil para reportes y gráficos de ventas semanales.
      pre
        code.
          GET /api/ventas/ventas-semana
      p Respuesta de ejemplo:
      pre
        code.
          [
            { "dia": "Lunes", "cantidad": 4, "ingresos": 12800 },
            { "dia": "Martes", "cantidad": 2, "ingresos": 6400 },
            { "dia": "Miércoles", "cantidad": 0, "ingresos": 0 },
            { "dia": "Jueves", "cantidad": 1, "ingresos": 3200 },
            { "dia": "Viernes", "cantidad": 3, "ingresos": 9600 },
            { "dia": "Sábado", "cantidad": 0, "ingresos": 0 },
            { "dia": "Domingo", "cantidad": 0, "ingresos": 0 }
          ]

      h3
        span.method.get GET
        | /api/ventas/:id
      p Obtiene los detalles de una venta específica.
      pre
        code.
          GET /api/ventas/ID_VENTA

      h3
        span.method.post POST
        | /api/ventas
      p Registra una nueva venta de libro. Al registrar una venta, el campo <code>ultimaVenta</code> del libro se actualiza automáticamente con la fecha de la venta.
      pre
        code.
          POST /api/ventas
          Content-Type: application/json
          {
            "libro": "ID_DEL_LIBRO",
            "cantidad": 2
          }
      p Respuesta exitosa:
      pre
        code.
          {
            "_id": "ID_VENTA",
            "libro": "ID_DEL_LIBRO",
            "cantidad": 2,
            "fecha": "2025-06-18T12:34:56.789Z"
          }

      h3
        span.method.put PUT
        | /api/ventas/:id
      p Edita una venta existente.
      pre
        code.
          PUT /api/ventas/ID_VENTA
          Content-Type: application/json
          {
            "libro": "ID_DEL_LIBRO",
            "cantidad": 3
          }

      h3
        span.method.delete DELETE
        | /api/ventas/:id
      p Elimina una venta por su ObjectId.
      pre
        code.
          DELETE /api/ventas/ID_VENTA

    .endpoint
      h2 Notas y Consideraciones
      ul
        li Todas las rutas requieren Content-Type: application/json para los métodos POST y PATCH.
        li Los IDs deben ser válidos de MongoDB (ObjectId).
        li El endpoint de ventas está anidado bajo /api/libros/ventas para mantener la relación con los libros.
        li Si necesitas endpoints adicionales (reportes, filtros, etc.), agrégalos según la necesidad del sistema.
        li Las fechas se devuelven en formato ISO 8601 (ejemplo: 2025-06-18T12:34:56.789Z).
        li Para reportes o listados personalizados, se recomienda implementar endpoints específicos en el backend.

    .endpoint
      h2 Autenticación y Seguridad
      p Actualmente, la API no requiere autenticación. Para entornos productivos, se recomienda implementar autenticación JWT o sesiones para proteger los endpoints sensibles (crear, editar, eliminar).
      ul
        li Para agregar autenticación, utiliza middleware como passport.js o express-jwt.
        li Protege los endpoints POST, PATCH y DELETE para evitar modificaciones no autorizadas.
        li Considera agregar roles de usuario (admin, vendedor, etc.) según las necesidades del sistema.

    .endpoint
      h2 Ejemplo de Respuesta de Error
      pre
        code.
          {
            "error": "Mensaje descriptivo del error"
          }